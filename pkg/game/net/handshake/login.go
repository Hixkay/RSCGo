/*
 * Copyright (c) 2020 Zachariah Knight <aeros.storkpk@gmail.com>
 *
 * Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

package handshake

import (
	"strings"
	"time"

	
	"github.com/spkaeros/rscgo/pkg/config"
	"github.com/spkaeros/rscgo/pkg/crypto"
	"github.com/spkaeros/rscgo/pkg/db"
	"github.com/spkaeros/rscgo/pkg/game/net"
	`github.com/spkaeros/rscgo/pkg/game/net/handlers`
	"github.com/spkaeros/rscgo/pkg/game/world"
	"github.com/spkaeros/rscgo/pkg/log"
	"github.com/spkaeros/rscgo/pkg/strutil"
)

func init() {
	handlers.AddHandler("loginreq", func(player *world.Player, p *net.Packet) {
		player.SetConnected(true)
		
		loginReply := NewLoginListener(player).ResponseListener()
		if !world.UpdateTime.IsZero() {
			loginReply <- ResponseLoginServerRejection
			return
		}
		if world.Players.Size() >= config.MaxPlayers() {
			loginReply <- ResponseWorldFull
			return
		}
		if LoginThrottle.Recent(player.CurrentIP(), time.Minute*5) >= 5 {
			loginReply <- ResponseSpamTimeout
			return
		}
		player.SetReconnecting(p.ReadBoolean())
		if ver := p.ReadUint16(); ver != config.Version() {
			log.Info.Printf("Invalid client version attempted to login: %d\n", ver)
			loginReply <- ResponseUpdated
			return
		}
		rsaSize := p.ReadUint16()
		data := make([]byte, rsaSize)
		rsaRead := p.Read(data)
		if rsaRead < rsaSize {
			log.Info.Println("Invalid RSA block; the buffer contains:", p.FrameBuffer)
			loginReply <- ResponseLoginServerRejection
			return
		}
		decryptedP := net.NewPacket(0x0, crypto.DecryptRSA(data))

//		decryptedP.Skip(1)
		// This next part of the RSA block contains our ISAAC seed values (4x32bit words),
		// The ISAAC seeds are traditionally generated by an initial session request from our client,
		// (opcode 32) which makes the server send back a 64bit uint containing the first half of 
		// our seed to the client.  The second half of the seed comes from the client operating
		// systems default CSPRNG during this packet construction.
		// Note: Deprecated in favor of TLS.  We'll leave it here for 235 protocol compatibility concerns.
		ourSeeds := []int{int(decryptedP.ReadUint32()), int(decryptedP.ReadUint32())}
		theirSeeds := []int{int(decryptedP.ReadUint32()), int(decryptedP.ReadUint32())}
		player.SetVar("ourSeed", ourSeeds)
		player.SetVar("theirSeed", theirSeeds)

		// this was named linkUID by jagex; it identifys a unique user agent
		//p.ReadUint32()

		player.Transients().SetVar("username", strutil.Base37.Encode(strings.TrimSpace(decryptedP.ReadString())))
		password := strings.TrimSpace(decryptedP.ReadString())
//		xteaSize := p.ReadUint16()
//		data = make([]byte, xteaSize)
//		xteaRead := p.Read(data)
//		if xteaRead < xteaSize {
//			log.Info.Println("Invalid xtea block; the buffer contains:", p.FrameBuffer)
//			loginReply <- ResponseLoginServerRejection
//			return
//		}
//		keyBuf := make([]byte, 4*4)
//		for i, v := range append(ourSeeds, theirSeeds...) {
//			binary.BigEndian.PutUint32(keyBuf[4*i:], v)
//		}
//		c, err := xtea.NewCipher(keyBuf)
//		if err != nil {
//			log.Info.Println(err)
//		}
//		out := make([]byte, xteaSize)
//		c.Decrypt(out, data)
//		p = net.NewPacket(0, crypto.DecryptXTEA(xteaSize, data, append(ourSeeds, theirSeeds...)...))
//		log.Info.Println(password)
//		player.Transients().SetVar("username", strutil.Base37.Encode(strings.TrimSpace(p.ReadString())))


		go func() {
			if world.Players.ContainsHash(player.UsernameHash()) {
				loginReply <- ResponseLoggedIn
				return
			}
			//dataService is a db.PlayerService that all login-related functions should use to access or change player profile data.
			var dataService = db.DefaultPlayerService
			if !dataService.PlayerNameExists(player.Username()) || !dataService.PlayerValidLogin(player.UsernameHash(), crypto.Hash(password)) {
				loginReply <- ResponseBadPassword
				return
			}
			if !dataService.PlayerLoad(player) {
				loginReply <- ResponseDecodeFailure
				return
			}

			if player.Reconnecting() {
				loginReply <- ResponseReconnected
				return
			}
			switch player.Rank() {
			case 2:
				loginReply <- ResponseAdministrator
			case 1:
				loginReply <- ResponseModerator
			default:
				loginReply <- ResponseLoginSuccess
			}
		}()
	})
	handlers.AddHandler("forgotpass", func(player *world.Player, p *net.Packet) {
		// TODO: These non-login handlers must be isolated and rewrote
		go func() {
			//dataService is a db.PlayerService that all login-related functions should use to access or change player profile data.
			var dataService = db.DefaultPlayerService
			usernameHash := p.ReadUint64()
			if !dataService.PlayerHasRecoverys(usernameHash) {
				player.SendPacket(net.NewReplyPacket([]byte{0}))
				player.Destroy()
				return
			}
			player.SendPacket(net.NewReplyPacket([]byte{1}))
			for _, question := range dataService.PlayerLoadRecoverys(usernameHash) {
				player.SendPacket(net.NewReplyPacket([]byte{byte(len(question))}).AddBytes([]byte(question)))
			}
		}()
	})
}
