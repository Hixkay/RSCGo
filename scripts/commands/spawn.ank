bind = import("bind")
log = import("log")
world = import("world")

bind.command("npc", func(player, args) {
	if len(args) < 1 {
		player.Message("Invalid syntax.  Usage: ::npc <id> (<radius>)")
		return
	}
	try {
		x = player.X()
		y = player.Y()
		id = toInt(args[0])
		rad = 5
		if len(args) > 1 {
			rad = toInt(args[1])
		}
		if rad < 0 {
			rad = 0
		}

		if len(args) > 2 {
			for i = 0; i < toInt(args[2]); i++ {
				world.addNpc(newNpc(id, x, y, x-rad, x+rad, y-rad, y+rad))
			}
		} else {
			world.addNpc(newNpc(id, x, y, x-rad, x+rad, y-rad, y+rad))
		}
		log.cmdf("'%v' spawned a new NPC{id:%v, rad:%v} at %v,%v", player.String(), id, rad, x, y)
	} catch {
		player.Message("Invalid syntax.  Usage: ::npc <id> (<radius>)")
		return
	}
})

bind.command("item", func(player, args) {
	try {
		id = toInt(args[0])
		if id < 0 || id > 1289 {
			return
		}
		amount = 1
		if len(args) > 1 {
			amount = toInt(args[1])
		}
		if amount < 1 {
			amount = 1
		}
		player.AddItem(id, amount)
	} catch e {
		player.Message("Invalid syntax.  Usage: ::item <id> (<amount>)")
	}
})

bind.command("object", func(player, args) {
	x = player.X()
	y = player.Y()
	if world.getObjectAt(x, y) != nil {
		player.Message("There is already an object here.")
		return
	}
	try {
		id = toInt(args[0])
		dir = North
		if len(args) > 1 {
			dir = parseDirection(args[1])
		}
		world.addObject(newObject(id, North, x, y, false))
		log.cmdf("'%v' spawned a new object{id:%v, dir:%v} at %v,%v", player.String(), id, dir, x, y)
	} catch e {
		player.Message("Invalid syntax.  Usage: ::object <id> (<dir>)")
	}
})

bind.command("dobj", func(player, args) {
	if len(args) == 0 {
		args = [toString(player.X()), toString(player.Y())]
	}
	if len(args) < 2 {
		player.Message("Invalid args.  Usage: ::dobj <x> <y>")
		return
	}
	x = toInt(args[0])
	y = toInt(args[1])
	object = world.getObjectAt(x, y)
	if object == nil {
		player.Message("Can not find object.")
		return
	}

	log.cmdf("%v deleted object %v", player, object)
	world.removeObject(object)
})

bind.command("boundary", func(player, args) {
	x = player.X()
	y = player.Y()
	if world.getObjectAt(x, y) != nil {
		player.Message("There is already an object here.")
		return
	}
	try {
		id = toInt(args[0])
		dir = North
		if len(args) > 1 {
			dir = parseDirection(args[1])
		}
		world.addObject(newObject(id, North, x, y, true))
		log.cmdf("'%v' spawned a new boundary{id:%v, dir:%v} at %v,%v", player.String(), id, dir, x, y)
	} catch e {
		player.Message("Invalid syntax.  Usage: ::boundary <id> (<dir>)")
	}
})
