regexp = import("regexp")

addCommand("stat", func(player, args) {
	if len(args) < 2 {
		sendMessage(player, "Invalid args.  Usage: ::stat <skill> <lvl>")
		return
	}
	idx = -1
	if regexp.MatchString(args[0]) {
		idx = toInt(args[0])
	} else {
		idx = getSkillIndex(args[0])
	}
	lvl = toInt(args[1])

	if idx < 0 || lvl < 1 || lvl > 99 {
		sendMessage(player, "Invalid args.  Usage: ::stat <skill> <lvl>")
		return
	}

	player.Skills().SetCur(idx, lvl)
	player.Skills().SetMax(idx, lvl)
	player.Skills().SetExp(idx, lvlToExp(lvl))
	sendStat(player, idx)
	player.AppearanceLock.Lock()
	player.AppearanceTicket++
	player.AppearanceLock.Unlock()
	player.ResetNeedsSelf()
})

addCommand("stats", func(player, args) {
	if len(args) < 3 {
		sendMessage(player, "Invalid args.  Usage: ::stats <atk> <def> <str>")
		return
	}
	atk = toInt(args[0])
	def = toInt(args[1])
	str = toInt(args[2])
	hpXp = toInt((lvlToExp(atk) + lvlToExp(def) + lvlToExp(str)) / 3) + 1154
	player.Skills().SetMax(ATTACK, atk)
	player.Skills().SetCur(ATTACK, atk)
	player.Skills().SetExp(ATTACK, lvlToExp(atk))
	sendStat(player, ATTACK)
	player.Skills().SetMax(DEFENSE, def)
	player.Skills().SetCur(DEFENSE, def)
	player.Skills().SetExp(DEFENSE, lvlToExp(def))
	sendStat(player, DEFENSE)
	player.Skills().SetMax(STRENGTH, str)
	player.Skills().SetCur(STRENGTH, str)
	player.Skills().SetExp(STRENGTH, lvlToExp(str))
	sendStat(player, STRENGTH)
	player.Skills().SetMax(HITPOINTS, expToLvl(hpXp))
	player.Skills().SetCur(HITPOINTS, expToLvl(hpXp))
	player.Skills().SetExp(HITPOINTS, hpXp)
	sendStat(player, HITPOINTS)

	player.AppearanceLock.Lock()
	player.AppearanceTicket++
	player.AppearanceLock.Unlock()
	player.ResetNeedsSelf()
})