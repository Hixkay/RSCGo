bind = import("bind")
time = import("time")
state = import("state")
strings = import("strings")

drainThesh = 325
equipModifier = 30.0
// adding each drainrate up happens to equal 325, and the math adds up that this makes the most logical sense as
// how jagex managed the prayer draining, more or less exactly to the millisecond I believe
// some variation from equip related math where I am less certain does apply.
drainRates = [15,15,15,30,30,30,5,10,10,60,60,60,60,60,60]

bind.login(func(player) {
	drained = 0
	tickRun(func() {
		index = 0
		for drainRate in drainRates {
			if player.PrayerActivated(index) {
				drained += drainRate
				if drained >= drainThesh {
					drained -= drainThesh
					player.IncCurStat(PRAYER, -1)
					if player.Skills().Current(PRAYER) <= 0 {
						for idx in range(len(drainRates)) {
							player.PrayerOff(idx)
						}
						player.SendPrayers()
						player.Message("You have run out of prayer points. Return to a church to recharge")
						return false
					}
				}
			}
			index++
		}
		return false
	})
})

bind.item(itemPredicate("bury", 20, 413, 604, 814), func(player, item) {
	player.AddState(state.DoingThing)
	player.Message("You dig a hole in the ground")
	stall(1)
	player.Message("You bury the " + strings.ToLower(item.Name()))
	player.Inventory.RemoveByID(toInt(item.ID), 1)
	switch item.ID {
	case 20:
		player.IncExp(PRAYER, 15)
	case 604:
		player.IncExp(PRAYER, 18)
	case 413:
		player.IncExp(PRAYER, 50)
	case 814:
		player.IncExp(PRAYER, 240)
	default:
		player.Message("Not yet supported, report it to staff to get this added!")
		log.cheat("Unsupported bury item encountered:", item, "from:", player)
	}
	player.RemoveState(state.DoingThing)
})
