bind = import("bind")
log = import("log")
world = import("world")
packets = import("packets")
load("scripts/lib/packets.ank")

// `blink` handler, simply teleports to target of ctrl+shift+click events
bind.packet(59, func(player, packet) {
	if !checkPacket(packet, 4) {
		return
	}
	if player.Rank() < 1 {
		return
	}
	player.SetCoords(toInt(packet.ReadUint16()), toInt(packet.ReadUint16()), true)
})

bind.packet(packets.walkRequest, func(player, packet) {
	if !checkPacket(packet, 4) {
		// min size being restrained to sizeof(startX)+sizeof(startY), as nothing without this data points is valid
		return
	}
	if player.IsFighting() {
		if player.IsDueling() && !player.DuelRetreating() {
			player.Message("You can not retreat during this duel!")
			return
		}
		if player.FightRound() < 3 {
			player.Message("You can't retreat during the first 3 rounds of combat")
			return
		}
		target = player.FightTarget()
		if target != nil {
			if target.IsPlayer() {
				opponent = toPlayer(target)
				opponent.PlaySound("retreat")
				opponent.Message("Your opponent is retreating")
			}
			target.ResetFighting()
		}
		player.PlaySound("retreat")
		player.UpdateLastRetreat()
		player.ResetFighting()
	} else if player.BusyInput() {
			ch = player.Value("closeMenu")
			if ch != nil {
				close(ch)
			}
	} else if !player.CanWalk() {
		return
	}
	startX = packet.ReadUint16()
	startY = packet.ReadUint16()
	pivots = packet.Available() / 2
	pivotsX = []
	pivotsY = []
	for i in range(pivots) {
		pivotsX[i] = packet.ReadInt8()
		pivotsY[i] = packet.ReadInt8()
	}
	player.ResetAll()
	player.SetPath(world.newPath(startX, startY, pivotsX, pivotsY))
})
bind.packet(packets.walkAction, func(player, packet) {
	if !checkPacket(packet, 4) {
		return
	}
	if !player.CanWalk() || player.IsFighting() {
		return
	}
	startX = packet.ReadUint16()
	startY = packet.ReadUint16()
	pivots = packet.Available() / 2
	pivotsX = []
	pivotsY = []
	for i in range(pivots) {
		pivotsX[i] = packet.ReadInt8()
		pivotsY[i] = packet.ReadInt8()
	}
	player.ResetAll()
	player.SetPath(world.newPath(startX, startY, pivotsX, pivotsY))
})
