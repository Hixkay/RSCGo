load("scripts/lib/packets.ank")

bind.packet(packets.settings, func(player, packet) {
	if !checkPacket(packet, 2) {
		return
	}
	player.SetClientSetting(packet.ReadUint8(), packet.ReadBoolean())
})

bind.packet(packets.privacySettings, func(player, packet) {
	if !checkPacket(packet, 4) {
		return
	}
	chatBlocked = packet.ReadBoolean()
	friendBlocked = packet.ReadBoolean()
	tradeBlocked = packet.ReadBoolean()
	duelBlocked = packet.ReadBoolean()
	if player.FriendBlocked() && !friendBlocked {
		// turning off private chat block
		world.Players.Range(func(c1) {
			if c1.FriendsWith(player.UsernameHash()) && !player.FriendsWith(c1.UsernameHash()) {
				c1.SendPacket(world.FriendUpdate(player.UsernameHash(), true))
			}
		})
	} else if !player.FriendBlocked() && friendBlocked {
		// turning on private chat block
		world.Players.Range(func(c1) {
			if c1.FriendsWith(player.UsernameHash()) && !player.FriendsWith(c1.UsernameHash()) {
				c1.SendPacket(world.FriendUpdate(player.UsernameHash(), false))
			}
		})
	}
	player.SetPrivacySettings(chatBlocked, friendBlocked, tradeBlocked, duelBlocked)
})

bind.packet(packets.recoverys, func(player, packet) {
	questions = make([]string, 5)
	answers = make([]string, 5)
	offset = 0
	for i = 0; i < 5; i++ {
		offset++
		if !checkPacket(packet, offset) {
			return
		}
		length = packet.ReadUint8()
		offset += length
		if !checkPacket(packet, offset) {
			return
		}
		questions = append(questions, packet.ReadStringN(length))
		offset += 8
		if !checkPacket(packet, offset) {
			return
		}
		answers = append(answers, packet.ReadUint64())
	}
	log.debug(questions, answers)
})
bind.packet(packets.changeRecoverys, func(player, packet) {
	player.WritePacket(net.barePacket((224)))
})

bind.packet(packets.cancelRecoverys, func(player, packet) {
	// TODO: Cancel request to change
})
