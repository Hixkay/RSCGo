load("scripts/lib/packets.ank")

bind.packet(packets.settings, func(player, packet) {
	if !checkPacket(packet, 2) {
		return
	}
	player.SetClientSetting(packet.ReadUint8(), packet.ReadBoolean())
})

bind.packet(packets.privacySettings, func(player, packet) {
	if !checkPacket(packet, 4) {
		return
	}
	chatBlocked = packet.ReadBoolean()
	friendBlocked = packet.ReadBoolean()
	tradeBlocked = packet.ReadBoolean()
	duelBlocked = packet.ReadBoolean()
	if player.FriendBlocked() && !friendBlocked {
		// turning off private chat block
		world.players.Range(func(c1) {
			if c1.FriendsWith(player.UsernameHash()) && !player.FriendsWith(c1.UsernameHash()) {
				c1.WritePacket(world.FriendUpdate(player.UsernameHash(), true))
			}
		})
	} else if !player.FriendBlocked() && friendBlocked {
		// turning on private chat block
		world.players.Range(func(c1) {
			if c1.FriendsWith(player.UsernameHash()) && !player.FriendsWith(c1.UsernameHash()) {
				c1.WritePacket(world.FriendUpdate(player.UsernameHash(), false))
			}
		})
	}
	player.SetPrivacySettings(chatBlocked, friendBlocked, tradeBlocked, duelBlocked)
})

bind.packet(packets.recoverys, func(player, packet) {
	questions = []
	answers = []
	offset = 0
	for i = 0; i < 5; i++ {
		offset++
		if !checkPacket(packet, offset) {
			return
		}
		length = packet.ReadUint8()
		offset += length
		if !checkPacket(packet, offset) {
			return
		}
		questions += packet.ReadStringN(length)
		offset += 8
		if !checkPacket(packet, offset) {
			return
		}
		answers += packet.ReadUint64()
	}
	log.debug(questions, answers)
})
bind.packet(packets.changeRecoverys, func(player, packet) {
//	player.WritePacket(net.barePacket([223]))
})

bind.packet(packets.cancelRecoverys, func(player, packet) {
	// TODO: Cancel request to change
})

bind.packet(packets.recoverAccount, func(player, packet) {
	usernameHash = packet.ReadUint64()
	//dataService is a db.PlayerService that all login-related functions should use to access or change player profile data.
	go func() {
		if !dataService.PlayerHasRecoverys(usernameHash) {
			player.Destroy()
			return
		}
		player.WritePacket(net.barePacket([1]))
		for _, question in dataService.PlayerLoadRecoverys(usernameHash) {
			// player.OutQueue <- &net.Packet{Bare: true, FrameBuffer: append([]byte{byte(len(question))}, []byte(question)...)}
//			player.WritePacket(net.barePacket([len(question), question...]))
			// player.WritePacket(net.NewReplyPacket([]byte{byte(len(question))}).AddBytes([]byte(question)))
		}
	}()
})

bind.packet(packets.changePassword, func(player, packet) {
	oldPassword = packet.ReadString()
	newPassword = packet.ReadString()
	go func() {
		//dataService is a db.PlayerService that all login-related functions should use to access or change player profile data.
		dataService = db.DefaultPlayerService
		if !dataService.PlayerValidLogin(player.UsernameHash(), crypto.Hash(oldPassword)) {
			player.Message("The old password you provided does not appear to be valid.  Try again.")
			return
		}
		dataService.PlayerChangePassword(player.UsernameHash(), crypto.Hash(newPassword))
		player.Message("Successfully updated your password to the new password you have provided.")
	}()
})










