bind = import("bind")
log = import("log")
world = import("world")
packets = import("packets")
load("scripts/lib/packets.ank")
crewHead           = 1
metalHead          = 4
downsHead          = 6
beardHead          = 7
baldHead           = 8
validHeads         = [crewHead, metalHead, downsHead, beardHead, baldHead]
validFemaleHeads   = [crewHead, metalHead, downsHead, baldHead]
maleBody           = 2
femaleBody         = 5
validBodys         = [maleBody, femaleBody]
validSkinColors    = [0xecded0, 0xccb366, 0xb38c40, 0x997326, 0x906020]
validHeadColors    = [0xffc030, 0xffa040, 0x805030, 0x604020, 0x303030, 0xff6020, 0xff4000, 0xffffff, 65280, 65535]
validBodyLegColors = [0xff0000, 0xff8000, 0xffe000, 0xa0e000, 57344, 32768, 41088, 45311, 33023, 12528, 0xe000e0, 0x303030, 0x604000, 0x805000, 0xffffff]

// TODO: RSC 235 does away with this--rather than the client asking for tickets, the server just does bookkeeping to notify others
// as needed, which is a slightly more involved solution for the server, but ultimately is probably a better and simpler solution
bind.packet(packets.ticketRequests, func(player, packet) {
	if !checkPacket(packet, 2) {
		return
	}
	count = packet.ReadUint16()
	if !checkPacket(packet, 2+count*4) {
		return
	}
	for i = 0; i < count; i++ {
		serverIdx = packet.ReadUint16()
		appearanceTicket = packet.ReadUint16()
		player.Enqueue("playerEventQ", {"idx": serverIdx, "ticket": appearanceTicket})
		// log.debugf("%v wants info about players[%d](info update #%d); scheduling to send data...\n", player, serverIdx, appearanceTicket)
	}
})

bind.packet(packets.appearance, func(player, packet) {
	if !player.HasState(state.ChangingLooks) {
		// Make sure the player either has never logged in before, or talked to the makeover mage to get here.
		return
	}
	isMale = packet.ReadBoolean()
	headType = packet.ReadUint8() + 1
	bodyType = packet.ReadUint8() + 1
	legType = packet.ReadUint8() + 1 // appearance2Colour, seems to be a client const, value seems to remain 2.  ofc, legs never change
	hairColor = packet.ReadUint8()
	topColor = packet.ReadUint8()
	legColor = packet.ReadUint8()
	skinColor = packet.ReadUint8()
	if hairColor >= len(validHeadColors) || !inArray(validHeads, headType) || topColor >= len(validBodyLegColors) || legColor >= len(validBodyLegColors) || skinColor >= len(validSkinColors) || !inArray(validBodys, bodyType) || legType != 3 || legColor >= len(validBodyLegColors) {
		log.debugf("Invalid appearance data provided by %v: (headType:%v, bodyType:%v, legType:%v, hairColor:%v, topColor:%v, legColor:%v, skinColor:%v, gender:%v)\n", player.String(), headType, bodyType, legType, hairColor, topColor, legColor, skinColor, isMale)
		return
	}
	if !isMale {
		if bodyType != femaleBody {
			log.cheat("Correcting invalid packet data: female asked for male body type; setting to female body type, packet from", player)
			bodyType = femaleBody
		}
		if headType == beardHead {
			log.cheat("Correcting invalid packet data: female asked for male head type; setting to female head type, packet from", player)
			headType = metalHead
		}
	}
	sprites = player.Equips()
	if sprites[0] == player.Appearance.Head {
		sprites[0] = headType
	}
	if sprites[1] == player.Appearance.Body {
		sprites[1] = bodyType
	}
	player.Appearance.Body = bodyType
	player.Appearance.Head = headType
	player.Appearance.Male = isMale
	player.Appearance.HeadColor = hairColor
	player.Appearance.SkinColor = skinColor
	player.Appearance.BodyColor = topColor
	player.Appearance.LegsColor = legColor
	player.UpdateAppearance()
	player.RemoveState(state.ChangingLooks)
	if !player.Attributes.Contains("madeAvatar") {
		player.WritePacket(world.WelcomeMessage)
		player.Attributes.SetVar("madeAvatar", time.Now())
                                                                                                                                                                                                                                                                                                                                                                                                  		player.Attributes.SetVar("lastLogin", time.Now())
	}

})

func inArray(haystack, needle) {
	for i in haystack {
		if i == needle {
			return true
		}
	}
	return false
}
